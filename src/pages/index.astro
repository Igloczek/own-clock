---
import Layout from "@/layout/Layout.astro"
---

<style>
  * {
    box-sizing: border-box;
  }

  html {
    height: 100%;
    min-width: 320px;
  }

  [x-cloak] {
    display: none;
  }
</style>

<style>
  .flip-card {
    position: relative;
    display: inline-flex;
    flex-direction: column;
    box-shadow: 0 2px 3px 0 rgba(0, 0, 0, 0.2);
    border-radius: 0.1em;
  }

  .top,
  .bottom,
  .flip-card .top-flip,
  .flip-card .bottom-flip {
    height: 0.75em;
    line-height: 1;
    padding: 0.25em;
    overflow: hidden;
  }

  .top,
  .flip-card .top-flip {
    background-color: #f7f7f7;
    border-top-right-radius: 0.1em;
    border-top-left-radius: 0.1em;
    border-bottom: 1px solid rgba(0, 0, 0, 0.1);
  }

  .bottom,
  .flip-card .bottom-flip {
    background-color: white;
    display: flex;
    align-items: flex-end;
    border-bottom-right-radius: 0.1em;
    border-bottom-left-radius: 0.1em;
  }

  .flip-card .top-flip {
    position: absolute;
    width: 100%;
    animation: flip-top 250ms ease-in;
    transform-origin: bottom;
  }

  @keyframes flip-top {
    100% {
      transform: rotateX(90deg);
    }
  }

  .flip-card .bottom-flip {
    position: absolute;
    bottom: 0;
    width: 100%;
    animation: flip-bottom 250ms ease-out 250ms;
    transform-origin: top;
    transform: rotateX(90deg);
  }

  @keyframes flip-bottom {
    100% {
      transform: rotateX(0deg);
    }
  }

  .container {
    display: flex;
    gap: 0.5em;
    justify-content: center;
  }

  .container-segment {
    display: flex;
    flex-direction: column;
    gap: 0.1em;
    align-items: center;
  }

  .segment {
    display: flex;
    gap: 0.1em;
  }

  .segment-title {
    font-size: 1rem;
  }
</style>

<script>
  import Alpine from "alpinejs"

  import spacetime from "spacetime"
  import SunCalc from "suncalc"
  import tzlookup from "tz-lookup"

  document.addEventListener("alpine:init", () => {
    Alpine.data("app", () => ({
      coords: {
        lat: 0,
        lon: 0,
      },
      times: {
        wakeUpTime: 0,
        sleepTime: 0,
      },
      past: {
        hours: 0,
        minutes: 0,
        seconds: 0,
      },
      left: {
        hours: 0,
        minutes: 0,
        seconds: 0,
      },
      init() {
        if (window.localStorage.getItem("position")) {
          const position = JSON.parse(window.localStorage.getItem("position"))
          this.coords.lat = position.latitude
          this.coords.lon = position.longitude
        }

        this.update()
        setInterval(() => this.update(), 1000)
      },

      setLocation() {
        window.navigator.geolocation.getCurrentPosition(
          (position) => {
            const { latitude, longitude } = position.coords

            this.coords.lat = latitude
            this.coords.lon = longitude

            window.localStorage.setItem(
              "position",
              JSON.stringify({ latitude, longitude }),
            )
          },
          (error) => {
            console.error({ error })
          },
          {
            enableHighAccuracy: true,
            timeout: 5000,
          },
        )
      },

      getSunriseTime(date) {
        const times = SunCalc.getTimes(date, this.coords.lat, this.coords.lon)
        return times.sunrise
      },

      update() {
        if (!this.coords.lat || !this.coords.lon) {
          return
        }

        const s = spacetime.now(tzlookup(this.coords.lat, this.coords.lon))

        const today = s.startOf("day").toNativeDate()
        const tomorrow = s.add(1, "day").startOf("day").toNativeDate()

        const wakeUpTime = this.getSunriseTime(today)
        const nextSunrise = this.getSunriseTime(tomorrow)

        const sleepTime = spacetime(nextSunrise).subtract(8, "hours")

        const now = spacetime.now()

        const past = spacetime(wakeUpTime).diff(now, "milliseconds")
        const left = now.diff(sleepTime, "milliseconds")

        this.past.hours = Math.abs(Math.floor(past / (1000 * 60 * 60)))
          .toString()
          .padStart(2, "0")
        this.past.minutes = Math.abs(Math.floor((past / (1000 * 60)) % 60))
          .toString()
          .padStart(2, "0")
        this.past.seconds = Math.abs(Math.floor((past / 1000) % 60))
          .toString()
          .padStart(2, "0")

        this.left.hours = Math.abs(Math.floor(left / (1000 * 60 * 60)))
          .toString()
          .padStart(2, "0")
        this.left.minutes = Math.abs(Math.floor((left / (1000 * 60)) % 60))
          .toString()
          .padStart(2, "0")
        this.left.seconds = Math.abs(Math.floor((left / 1000) % 60))
          .toString()
          .padStart(2, "0")
      },
    }))
  })

  window.onload = () => {
    Alpine.start()

    // needed for Alpine devtools
    window.Alpine = Alpine
  }
</script>

<Layout>
  <main class="flex h-full items-center">
    <div
      class="flex h-full w-full flex-col items-center justify-center px-4 py-8 text-center"
      x-data="app"
    >
      <div
        x-show="!coords.lat || !coords.lon"
        x-cloak
      >
        <h1 class="text-5xl font-bold leading-tight min-[340px]:text-6xl">
          Own <span class="text-purple-500">clock</span>
        </h1>

        <p class="mt-2 max-w-prose text-sm leading-6">
          Break free from the constraints of standard time, embrace the sun's
          natural rhythm for a healthier sleep cycle and a more balanced day.
        </p>

        <button
          class="mt-8 rounded bg-purple-500 px-16 py-2 text-sm text-white hover:bg-purple-600"
          @click="setLocation"
        >
          Setup own clock
        </button>
        <p class="mx-auto p-1 text-center text-xs">
          Location is needed to calculate your local sunrise and sunset times
        </p>
      </div>

      <div
        x-show="coords.lat && coords.lon"
        x-cloak
      >
        <div>
          <div class="pb-2 text-xs">Since wake up</div>
          <div
            class="flex flex-row items-center justify-center gap-2 text-4xl font-bold"
          >
            <div
              class="w-20 rounded border p-2 font-mono"
              x-text="past.hours"
            >
              00
            </div>
            <div
              class="w-20 rounded border p-2 font-mono"
              x-text="past.minutes"
            >
              00
            </div>
            <div
              class="w-20 rounded border p-2 font-mono"
              x-text="past.seconds"
            >
              00
            </div>
          </div>
        </div>

        <div class="mt-8">
          <div class="pb-2 text-xs">Till bedtime</div>

          <div
            class="flex flex-row items-center justify-center gap-2 text-4xl font-bold"
          >
            <div
              class="w-20 rounded border p-2 font-mono"
              x-text="left.hours"
            >
              00
            </div>
            <div
              class="w-20 rounded border p-2 font-mono"
              x-text="left.minutes"
            >
              00
            </div>
            <div
              class="w-20 rounded border p-2 font-mono"
              x-text="left.seconds"
            >
              00
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>
</Layout>
